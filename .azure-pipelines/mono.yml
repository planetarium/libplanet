parameters:
  configuration: Debug
  testDisplayName: xunit.console.exe *.Tests.dll
  testCommand: "mono --server xunit.runner.console.*/tools/net471/xunit.console.exe"
  testArguments: -verbose -parallel none
  testTimeoutInMinutes: 12
  excludeTests: ""
  publicTestResult: true

steps:

- task: Bash@3
  displayName: hooks/check-bom
  inputs:
    targetType: filePath
    filePath: hooks/check-bom

- task: NuGetCommand@2
  displayName: nuget install xunit.runner.console
  inputs:
    command: custom
    arguments: install xunit.runner.console

- task: CmdLine@2
  displayName: msbuild /restore
  inputs:
    script: |
      msbuild \
        /restore \
        /p:Configuration=${{ parameters.configuration }} \
        /p:SkipSonar=true

# https://github.com/sschmid/Entitas-CSharp/issues/811#issuecomment-449182023
# https://github.com/dotnet/docfx/issues/3389
- task: CmdLine@2
  inputs:
    script: |
      set -vx
      tmpdir="$(mktemp -d)"
      pushd "$tmpdir/"
      wget --trust-server-names \
        https://www.nuget.org/api/v2/package/SQLitePCLRaw.core/2.0.4
      7z x sqlitepclraw.core.*.nupkg
      popd
      for f in *.Tests; do
        path="$(find "$f" \
          -wholename "$f/bin/${{ parameters.configuration }}/net*/"$f".dll")"
        cp -v "$tmpdir"/lib/net*/SQLitePCLRaw.core.dll "$(dirname "$path")"
      done

- ${{ if eq(parameters.publicTestResult, false) }}:
  - task: CmdLine@2
    displayName: ${{ parameters.testDisplayName }}
    inputs:
      script: |
        set -vx
        declare -a assemblies
        exclude_tests="${{ parameters.excludeTests }}"
        for f in *.Tests; do
          if [[ "$exclude_tests" != "" && "$f" = $exclude_tests ]]; then
            continue
          fi
          path="$(find "$f" \
            -wholename "$f/bin/${{ parameters.configuration }}/net*/"$f".dll")"
          assemblies+=("`pwd`/$path")
        done
        ${{ parameters.testCommand }} \
          "${assemblies[@]}" \
          ${{ parameters.testArguments }}
    env:
      TURN_SERVER_URL: ${{ parameters.turnServerUrl }}
      MONO_THREADS_SUSPEND: preemptive
    timeoutInMinutes: ${{ parameters.testTimeoutInMinutes }}

- ${{ if eq(parameters.publicTestResult, true) }}:
  - task: CmdLine@2
    displayName: ${{ parameters.testDisplayName }}
    inputs:
      script: |
        set -vx
        declare -a assemblies
        exclude_tests="${{ parameters.excludeTests }}"
        for f in *.Tests; do
          if [[ "$exclude_tests" != "" && "$f" = $exclude_tests ]]; then
            continue
          fi
          path="$(find "$f" \
            -wholename "$f/bin/${{ parameters.configuration }}/net*/"$f".dll")"
          assemblies+=("`pwd`/$path")
        done
        ${{ parameters.testCommand }} \
          "${assemblies[@]}" \
          ${{ parameters.testArguments }} \
          -xml "$(Agent.TempDirectory)/xunit.xml"
    env:
      TURN_SERVER_URL: ${{ parameters.turnServerUrl }}
      MONO_THREADS_SUSPEND: preemptive
    timeoutInMinutes: ${{ parameters.testTimeoutInMinutes }}
  - task: PublishTestResults@2
    inputs:
      testRunner: XUnit
      testResultsFiles: '$(Agent.TempDirectory)/xunit.xml'
