using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using Libplanet.Action;
using Libplanet.Crypto;
using Libplanet.Tests.Common.Action;
using Libplanet.Tx;
using Xunit;
using static Libplanet.Tests.TestUtils;

namespace Libplanet.Tests.Tx
{
    public class TransactionTest
    {
        private readonly TxFixture _fx;

        public TransactionTest()
        {
            _fx = new TxFixture();
        }

        [Fact]
        public void Create()
        {
            var privateKey = new PrivateKey(
                new byte[]
                {
                    0xcf, 0x36, 0xec, 0xf9, 0xe4, 0x7c, 0x87, 0x9a, 0x0d, 0xbf,
                    0x46, 0xb2, 0xec, 0xd8, 0x3f, 0xd2, 0x76, 0x18, 0x2a, 0xde,
                    0x02, 0x65, 0x82, 0x5e, 0x3b, 0x8c, 0x6b, 0xa2, 0x14, 0x46,
                    0x7b, 0x76,
                }
            );
            var timestamp =
                new DateTimeOffset(2018, 11, 21, 0, 0, 0, TimeSpan.Zero);
            Address stateStore = new Address(
                new byte[]
                {
                    0xe6, 0x95, 0x1c, 0x43, 0x02, 0xdf, 0x13, 0xf9, 0x29, 0xfc,
                    0xdb, 0xc5, 0x56, 0xd9, 0xac, 0x20, 0x41, 0xfe, 0xf9, 0x5f,
                }
            );
            var action = new DetectRehearsal { TargetAddress = stateStore };
            Transaction<BaseAction> tx = Transaction<BaseAction>.Create(
                privateKey,
                new BaseAction[] { action },
                ImmutableHashSet<Address>.Empty,
                timestamp
            );

            Assert.Equal(
                new Address(privateKey.PublicKey),
                tx.Signer
            );
            Assert.Equal(
                new[] { stateStore }.ToImmutableHashSet(),
                tx.UpdatedAddresses
            );
            Assert.Equal(privateKey.PublicKey, tx.PublicKey);
            Assert.Equal(timestamp, tx.Timestamp);
            AssertBytesEqual(
                new byte[]
                {
                    0x30, 0x44, 0x02, 0x20, 0x5f, 0xb4, 0xcb, 0x1e, 0x20, 0x81,
                    0xae, 0x22, 0x06, 0x29, 0xa7, 0x0f, 0x25, 0x42, 0x4c, 0x9c,
                    0x6f, 0xcd, 0xdc, 0x90, 0x5c, 0xe4, 0x46, 0xc9, 0x90, 0xe6,
                    0x8c, 0x11, 0x20, 0x47, 0xf9, 0xf7, 0x02, 0x20, 0x56, 0x95,
                    0x7a, 0x7e, 0xdf, 0xa7, 0x1d, 0x6f, 0xc4, 0x1e, 0x70, 0xf5,
                    0x53, 0xca, 0x72, 0xeb, 0xd4, 0x17, 0xe1, 0x9c, 0xb4, 0xe7,
                    0x86, 0x0d, 0xd2, 0xc6, 0x8a, 0xb7, 0x1b, 0x76, 0xbb, 0xfc,
                },
                tx.Signature
            );
            AssertBytesEqual(
                new TxId(
                    new byte[]
                    {
                        0x33, 0x32, 0x0c, 0x8c, 0x83, 0xe2, 0xc2, 0x02, 0xbb,
                        0x05, 0x56, 0x3e, 0x8c, 0x52, 0xdc, 0x21, 0x06, 0x3c,
                        0xd3, 0x6e, 0xa1, 0xa4, 0xa5, 0x0c, 0xb2, 0xf1, 0x7c,
                        0xfe, 0x33, 0x61, 0x24, 0x09,
                    }
                ),
                tx.Id
            );
            Assert.True(((DetectRehearsal)tx.Actions[0]).ResultState);
        }

        [Fact]
        public void CreateWithDefaultUpdatedAddresses()
        {
            Transaction<BaseAction> emptyTx = Transaction<BaseAction>.Create(
                _fx.PrivateKey,
                new BaseAction[0]
            );
            Assert.Empty(emptyTx.UpdatedAddresses);

            Transaction<BaseAction> tx = Transaction<BaseAction>.Create(
                _fx.PrivateKey,
                _fx.TxWithActions.Actions
            );
            Assert.Equal(
                new[] { _fx.Address }.ToImmutableHashSet(),
                tx.UpdatedAddresses
            );

            Address additionalAddr = new PrivateKey().PublicKey.ToAddress();
            Transaction<BaseAction> txWithAddr = Transaction<BaseAction>.Create(
                _fx.PrivateKey,
                _fx.TxWithActions.Actions,
                new[] { additionalAddr }.ToImmutableHashSet()
            );
            Assert.Equal(
                new[] { _fx.Address, additionalAddr }.ToHashSet(),
                txWithAddr.UpdatedAddresses.ToHashSet()
            );
        }

        [Fact]
        public void CreateWithDefaultTimestamp()
        {
            DateTimeOffset rightBefore = DateTimeOffset.UtcNow;
            Transaction<BaseAction> tx = Transaction<BaseAction>.Create(
                _fx.PrivateKey,
                new BaseAction[0],
                ImmutableHashSet<Address>.Empty
            );
            DateTimeOffset rightAfter = DateTimeOffset.UtcNow;

            Assert.InRange(tx.Timestamp, rightBefore, rightAfter);
        }

        [Fact]
        public void CreateWithMissingRequiredArguments()
        {
            // The privateKey parameter cannot be null.
            Assert.Throws<ArgumentNullException>(() =>
                Transaction<BaseAction>.Create(
                    null,
                    new BaseAction[0],
                    ImmutableHashSet<Address>.Empty,
                    DateTimeOffset.UtcNow
                )
            );

            // The actions parameter cannot be null.
            Assert.Throws<ArgumentNullException>(() =>
                Transaction<BaseAction>.Create(
                    _fx.PrivateKey,
                    null,
                    ImmutableHashSet<Address>.Empty,
                    DateTimeOffset.UtcNow
                )
            );
        }

        [Fact]
        public void CreateWithActionsThrowingException()
        {
            var action = new ThrowException { Throw = true };
            Assert.Throws<UnexpectedlyTerminatedTxRehearsalException>(() =>
                Transaction<BaseAction>.Create(
                    _fx.PrivateKey,
                    new BaseAction[] { action },
                    ImmutableHashSet<Address>.Empty,
                    DateTimeOffset.UtcNow
                )
            );
        }

        [Fact]
        public void MakeWithSignature()
        {
            var privateKey = new PrivateKey(
                new byte[]
                {
                    0xcf, 0x36, 0xec, 0xf9, 0xe4, 0x7c, 0x87, 0x9a, 0x0d, 0xbf,
                    0x46, 0xb2, 0xec, 0xd8, 0x3f, 0xd2, 0x76, 0x18, 0x2a, 0xde,
                    0x02, 0x65, 0x82, 0x5e, 0x3b, 0x8c, 0x6b, 0xa2, 0x14, 0x46,
                    0x7b, 0x76,
                }
            );
            var timestamp = new DateTimeOffset(2018, 11, 21, 0, 0, 0, TimeSpan.Zero);
            var signature = new byte[]
            {
                0x30, 0x44, 0x02, 0x20, 0x0e, 0xec, 0x2a, 0x53, 0xba, 0x8e,
                0xb0, 0x6f, 0x09, 0x71, 0x00, 0x49, 0xf0, 0xc9, 0x75, 0x71,
                0x70, 0xcf, 0xda, 0x5d, 0xe5, 0xab, 0xd9, 0xd3, 0xfb, 0xa2,
                0xca, 0xa1, 0x30, 0x35, 0x93, 0x70, 0x02, 0x20, 0x7a, 0x4b,
                0xda, 0x5e, 0x6c, 0x5e, 0x3a, 0x4f, 0x5b, 0x6e, 0x5b, 0x54,
                0x9f, 0xf6, 0x99, 0x2d, 0xd0, 0x9a, 0x0d, 0xac, 0xec, 0x83,
                0x20, 0x2b, 0x82, 0x40, 0x0d, 0x6e, 0x5e, 0x9f, 0xbd, 0x2b,
            };
            var tx = new Transaction<BaseAction>(
                privateKey.PublicKey.ToAddress(),
                privateKey.PublicKey,
                ImmutableHashSet<Address>.Empty,
                timestamp,
                new BaseAction[0],
                signature
            );

            Assert.Equal(
                new Address(privateKey.PublicKey),
                tx.Signer
            );
            Assert.Equal(ImmutableHashSet<Address>.Empty, tx.UpdatedAddresses);
            Assert.Equal(privateKey.PublicKey, tx.PublicKey);
            Assert.Equal(timestamp, tx.Timestamp);
            AssertBytesEqual(
                signature,
                tx.Signature
            );
            AssertBytesEqual(
                new TxId(
                    new byte[]
                    {
                        0x0b, 0xa2, 0x25, 0x37, 0xb0, 0x07, 0xcf, 0xe8, 0x5c,
                        0xaa, 0x30, 0x39, 0x0d, 0xc3, 0xad, 0xa8, 0x80, 0xed,
                        0xd3, 0x19, 0xcc, 0x85, 0xaa, 0x45, 0x52, 0x57, 0x29,
                        0xf4, 0x74, 0x87, 0x67, 0xfb,
                    }
                ),
                tx.Id
            );

            var invalidSignature = new byte[]
            {
                0x30, 0x45, 0x02, 0x21, 0x00, 0x9b, 0x8e, 0xb8, 0xb8, 0x6b,
                0x31, 0x8d, 0xb4, 0x86, 0xb5, 0x9a, 0x4f, 0x8e, 0x54, 0xea,
                0xa6, 0x8f, 0x88, 0x73, 0x94, 0x63, 0xa9, 0x19, 0x36, 0x1a,
                0x4b, 0x1a, 0x32, 0xcf, 0x22, 0xf2, 0x1e, 0x02, 0x20, 0x76,
                0xbe, 0x7f, 0xbf, 0x76, 0xa2, 0x09, 0x71, 0xfe, 0xf9, 0x28,
                0xc6, 0x44, 0x0e, 0xdf, 0xda, 0xf3, 0x82, 0x29, 0x7b, 0x0f,
                0x09, 0xf4, 0x50, 0x9f, 0xb1, 0xb1, 0x1e, 0xab, 0x11, 0x4b,
                0x3f,
            };

            // The publicKey parameter cannot be null.
            Assert.Throws<ArgumentNullException>(() =>
                new Transaction<BaseAction>(
                    privateKey.PublicKey.ToAddress(),
                    null,
                    ImmutableHashSet<Address>.Empty,
                    timestamp,
                    new BaseAction[0],
                    signature
                )
            );

            // The actions parameter cannot be null.
            Assert.Throws<ArgumentNullException>(() =>
                new Transaction<BaseAction>(
                    privateKey.PublicKey.ToAddress(),
                    privateKey.PublicKey,
                    ImmutableHashSet<Address>.Empty,
                    timestamp,
                    null,
                    signature
                )
            );

            // The signature parameter cannot be null.
            Assert.Throws<ArgumentNullException>(() =>
                new Transaction<BaseAction>(
                    privateKey.PublicKey.ToAddress(),
                    privateKey.PublicKey,
                    ImmutableHashSet<Address>.Empty,
                    timestamp,
                    new BaseAction[0],
                    null
                )
            );

            Assert.Throws<InvalidTxSignatureException>(() =>
                new Transaction<BaseAction>(
                    privateKey.PublicKey.ToAddress(),
                    privateKey.PublicKey,
                    ImmutableHashSet<Address>.Empty,
                    timestamp,
                    new BaseAction[0],
                    invalidSignature
                )
            );
        }

        [Fact]
        public void ToBencodex()
        {
            byte[] expected =
            {
                0x64, 0x37, 0x3a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
                0x6c, 0x65, 0x31, 0x30, 0x3a, 0x70, 0x75, 0x62, 0x6c, 0x69,
                0x63, 0x5f, 0x6b, 0x65, 0x79, 0x36, 0x35, 0x3a, 0x04, 0x46,
                0x11, 0x5b, 0x01, 0x31, 0xba, 0xcc, 0xf9, 0x4a, 0x58, 0x56,
                0xed, 0xe8, 0x71, 0x29, 0x5f, 0x6f, 0x3d, 0x35, 0x2e, 0x68,
                0x47, 0xcd, 0xa9, 0xc0, 0x3e, 0x89, 0xfe, 0x09, 0xf7, 0x32,
                0x80, 0x87, 0x11, 0xec, 0x97, 0xaf, 0x6e, 0x34, 0x1f, 0x11,
                0x0a, 0x32, 0x6d, 0xa1, 0xbd, 0xb8, 0x1f, 0x5a, 0xe3, 0xba,
                0xdf, 0x76, 0xa9, 0x0b, 0x22, 0xc8, 0xc4, 0x91, 0xae, 0xd3,
                0xaa, 0xa2, 0x96, 0x39, 0x3a, 0x73, 0x69, 0x67, 0x6e, 0x61,
                0x74, 0x75, 0x72, 0x65, 0x37, 0x30, 0x3a, 0x30, 0x44, 0x02,
                0x20, 0x0e, 0xec, 0x2a, 0x53, 0xba, 0x8e, 0xb0, 0x6f, 0x09,
                0x71, 0x00, 0x49, 0xf0, 0xc9, 0x75, 0x71, 0x70, 0xcf, 0xda,
                0x5d, 0xe5, 0xab, 0xd9, 0xd3, 0xfb, 0xa2, 0xca, 0xa1, 0x30,
                0x35, 0x93, 0x70, 0x02, 0x20, 0x7a, 0x4b, 0xda, 0x5e, 0x6c,
                0x5e, 0x3a, 0x4f, 0x5b, 0x6e, 0x5b, 0x54, 0x9f, 0xf6, 0x99,
                0x2d, 0xd0, 0x9a, 0x0d, 0xac, 0xec, 0x83, 0x20, 0x2b, 0x82,
                0x40, 0x0d, 0x6e, 0x5e, 0x9f, 0xbd, 0x2b, 0x36, 0x3a, 0x73,
                0x69, 0x67, 0x6e, 0x65, 0x72, 0x32, 0x30, 0x3a, 0xc2, 0xa8,
                0x60, 0x14, 0x07, 0x3d, 0x66, 0x2a, 0x4a, 0x9b, 0xfc, 0xf9,
                0xcb, 0x54, 0x26, 0x3d, 0xfa, 0x4f, 0x5c, 0xbc, 0x39, 0x3a,
                0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x75,
                0x32, 0x37, 0x3a, 0x32, 0x30, 0x31, 0x38, 0x2d, 0x31, 0x31,
                0x2d, 0x32, 0x31, 0x54, 0x30, 0x30, 0x3a, 0x30, 0x30, 0x3a,
                0x30, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x5a,
                0x31, 0x37, 0x3a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
                0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73,
                0x30, 0x3a, 0x65,
            };

            AssertBytesEqual(expected, _fx.Tx.ToBencodex(true));
        }

        [Fact]
        public void ToBencodexWithActions()
        {
            var expected = new byte[]
            {
                0x64, 0x37, 0x3a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
                0x6c, 0x64, 0x75, 0x37, 0x3a, 0x74, 0x79, 0x70, 0x65, 0x5f,
                0x69, 0x64, 0x75, 0x36, 0x3a, 0x61, 0x74, 0x74, 0x61, 0x63,
                0x6b, 0x75, 0x36, 0x3a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
                0x64, 0x75, 0x36, 0x3a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
                0x75, 0x33, 0x3a, 0x6f, 0x72, 0x63, 0x75, 0x31, 0x34, 0x3a,
                0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x64,
                0x72, 0x65, 0x73, 0x73, 0x32, 0x30, 0x3a, 0xc2, 0xa8, 0x60,
                0x14, 0x07, 0x3d, 0x66, 0x2a, 0x4a, 0x9b, 0xfc, 0xf9, 0xcb,
                0x54, 0x26, 0x3d, 0xfa, 0x4f, 0x5c, 0xbc, 0x75, 0x36, 0x3a,
                0x77, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x75, 0x34, 0x3a, 0x77,
                0x61, 0x6e, 0x64, 0x65, 0x65, 0x64, 0x75, 0x37, 0x3a, 0x74,
                0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x75, 0x35, 0x3a, 0x73,
                0x6c, 0x65, 0x65, 0x70, 0x75, 0x36, 0x3a, 0x76, 0x61, 0x6c,
                0x75, 0x65, 0x73, 0x64, 0x75, 0x37, 0x3a, 0x7a, 0x6f, 0x6e,
                0x65, 0x5f, 0x69, 0x64, 0x69, 0x31, 0x30, 0x65, 0x65, 0x65,
                0x65, 0x31, 0x30, 0x3a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
                0x5f, 0x6b, 0x65, 0x79, 0x36, 0x35, 0x3a, 0x04, 0x46, 0x11,
                0x5b, 0x01, 0x31, 0xba, 0xcc, 0xf9, 0x4a, 0x58, 0x56, 0xed,
                0xe8, 0x71, 0x29, 0x5f, 0x6f, 0x3d, 0x35, 0x2e, 0x68, 0x47,
                0xcd, 0xa9, 0xc0, 0x3e, 0x89, 0xfe, 0x09, 0xf7, 0x32, 0x80,
                0x87, 0x11, 0xec, 0x97, 0xaf, 0x6e, 0x34, 0x1f, 0x11, 0x0a,
                0x32, 0x6d, 0xa1, 0xbd, 0xb8, 0x1f, 0x5a, 0xe3, 0xba, 0xdf,
                0x76, 0xa9, 0x0b, 0x22, 0xc8, 0xc4, 0x91, 0xae, 0xd3, 0xaa,
                0xa2, 0x96, 0x39, 0x3a, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
                0x75, 0x72, 0x65, 0x37, 0x30, 0x3a, 0x30, 0x44, 0x02, 0x20,
                0x3c, 0x4c, 0xf2, 0x21, 0xff, 0x4c, 0xa8, 0x55, 0xa9, 0x7a,
                0x2f, 0x4b, 0x91, 0x26, 0x34, 0x8d, 0xc5, 0x45, 0x7c, 0x6e,
                0xc0, 0x2c, 0xfb, 0xbf, 0x65, 0x5b, 0xdc, 0xb9, 0x1e, 0x7a,
                0x8b, 0x0f, 0x02, 0x20, 0x5d, 0xb2, 0xad, 0xf0, 0xae, 0xb2,
                0xce, 0x48, 0x44, 0x1b, 0x86, 0x9a, 0x63, 0x86, 0x25, 0xac,
                0x4c, 0xe1, 0x5d, 0x8e, 0x40, 0xb6, 0x95, 0xae, 0x8c, 0xd9,
                0x4e, 0x19, 0x27, 0xaa, 0xdd, 0x03, 0x36, 0x3a, 0x73, 0x69,
                0x67, 0x6e, 0x65, 0x72, 0x32, 0x30, 0x3a, 0xc2, 0xa8, 0x60,
                0x14, 0x07, 0x3d, 0x66, 0x2a, 0x4a, 0x9b, 0xfc, 0xf9, 0xcb,
                0x54, 0x26, 0x3d, 0xfa, 0x4f, 0x5c, 0xbc, 0x39, 0x3a, 0x74,
                0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x75, 0x32,
                0x37, 0x3a, 0x32, 0x30, 0x31, 0x38, 0x2d, 0x31, 0x31, 0x2d,
                0x32, 0x31, 0x54, 0x30, 0x30, 0x3a, 0x30, 0x30, 0x3a, 0x30,
                0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x5a, 0x31,
                0x37, 0x3a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f,
                0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x32,
                0x30, 0x3a, 0xc2, 0xa8, 0x60, 0x14, 0x07, 0x3d, 0x66, 0x2a,
                0x4a, 0x9b, 0xfc, 0xf9, 0xcb, 0x54, 0x26, 0x3d, 0xfa, 0x4f,
                0x5c, 0xbc, 0x65,
            };

            AssertBytesEqual(expected, _fx.TxWithActions.ToBencodex(true));
        }

        [Fact]
        public void FromBencodex()
        {
            var bytes = new byte[]
            {
                0x64, 0x37, 0x3a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
                0x6c, 0x65, 0x31, 0x30, 0x3a, 0x70, 0x75, 0x62, 0x6c, 0x69,
                0x63, 0x5f, 0x6b, 0x65, 0x79, 0x36, 0x35, 0x3a, 0x04, 0x46,
                0x11, 0x5b, 0x01, 0x31, 0xba, 0xcc, 0xf9, 0x4a, 0x58, 0x56,
                0xed, 0xe8, 0x71, 0x29, 0x5f, 0x6f, 0x3d, 0x35, 0x2e, 0x68,
                0x47, 0xcd, 0xa9, 0xc0, 0x3e, 0x89, 0xfe, 0x09, 0xf7, 0x32,
                0x80, 0x87, 0x11, 0xec, 0x97, 0xaf, 0x6e, 0x34, 0x1f, 0x11,
                0x0a, 0x32, 0x6d, 0xa1, 0xbd, 0xb8, 0x1f, 0x5a, 0xe3, 0xba,
                0xdf, 0x76, 0xa9, 0x0b, 0x22, 0xc8, 0xc4, 0x91, 0xae, 0xd3,
                0xaa, 0xa2, 0x96, 0x39, 0x3a, 0x73, 0x69, 0x67, 0x6e, 0x61,
                0x74, 0x75, 0x72, 0x65, 0x37, 0x30, 0x3a, 0x30, 0x44, 0x02,
                0x20, 0x0e, 0xec, 0x2a, 0x53, 0xba, 0x8e, 0xb0, 0x6f, 0x09,
                0x71, 0x00, 0x49, 0xf0, 0xc9, 0x75, 0x71, 0x70, 0xcf, 0xda,
                0x5d, 0xe5, 0xab, 0xd9, 0xd3, 0xfb, 0xa2, 0xca, 0xa1, 0x30,
                0x35, 0x93, 0x70, 0x02, 0x20, 0x7a, 0x4b, 0xda, 0x5e, 0x6c,
                0x5e, 0x3a, 0x4f, 0x5b, 0x6e, 0x5b, 0x54, 0x9f, 0xf6, 0x99,
                0x2d, 0xd0, 0x9a, 0x0d, 0xac, 0xec, 0x83, 0x20, 0x2b, 0x82,
                0x40, 0x0d, 0x6e, 0x5e, 0x9f, 0xbd, 0x2b, 0x36, 0x3a, 0x73,
                0x69, 0x67, 0x6e, 0x65, 0x72, 0x32, 0x30, 0x3a, 0xc2, 0xa8,
                0x60, 0x14, 0x07, 0x3d, 0x66, 0x2a, 0x4a, 0x9b, 0xfc, 0xf9,
                0xcb, 0x54, 0x26, 0x3d, 0xfa, 0x4f, 0x5c, 0xbc, 0x39, 0x3a,
                0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x75,
                0x32, 0x37, 0x3a, 0x32, 0x30, 0x31, 0x38, 0x2d, 0x31, 0x31,
                0x2d, 0x32, 0x31, 0x54, 0x30, 0x30, 0x3a, 0x30, 0x30, 0x3a,
                0x30, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x5a,
                0x31, 0x37, 0x3a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
                0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73,
                0x30, 0x3a, 0x65,
            };
            PublicKey publicKey = new PrivateKey(
                new byte[]
                {
                    0xcf, 0x36, 0xec, 0xf9, 0xe4, 0x7c, 0x87, 0x9a, 0x0d, 0xbf,
                    0x46, 0xb2, 0xec, 0xd8, 0x3f, 0xd2, 0x76, 0x18, 0x2a, 0xde,
                    0x02, 0x65, 0x82, 0x5e, 0x3b, 0x8c, 0x6b, 0xa2, 0x14, 0x46,
                    0x7b, 0x76,
                }
            ).PublicKey;
            Transaction<BaseAction> tx = Transaction<BaseAction>.FromBencodex(bytes);

            Assert.Equal(publicKey, tx.PublicKey);
            Assert.Equal(ImmutableHashSet<Address>.Empty, tx.UpdatedAddresses);
            Assert.Equal(new Address(publicKey), tx.Signer);
            Assert.Equal(new DateTimeOffset(2018, 11, 21, 0, 0, 0, TimeSpan.Zero), tx.Timestamp);
            AssertBytesEqual(
                new byte[]
                {
                    0x30, 0x44, 0x02, 0x20, 0x0e, 0xec, 0x2a, 0x53, 0xba, 0x8e,
                    0xb0, 0x6f, 0x09, 0x71, 0x00, 0x49, 0xf0, 0xc9, 0x75, 0x71,
                    0x70, 0xcf, 0xda, 0x5d, 0xe5, 0xab, 0xd9, 0xd3, 0xfb, 0xa2,
                    0xca, 0xa1, 0x30, 0x35, 0x93, 0x70, 0x02, 0x20, 0x7a, 0x4b,
                    0xda, 0x5e, 0x6c, 0x5e, 0x3a, 0x4f, 0x5b, 0x6e, 0x5b, 0x54,
                    0x9f, 0xf6, 0x99, 0x2d, 0xd0, 0x9a, 0x0d, 0xac, 0xec, 0x83,
                    0x20, 0x2b, 0x82, 0x40, 0x0d, 0x6e, 0x5e, 0x9f, 0xbd, 0x2b,
                },
                tx.Signature
            );
            AssertBytesEqual(
                new TxId(
                    new byte[]
                    {
                        0x0b, 0xa2, 0x25, 0x37, 0xb0, 0x07, 0xcf, 0xe8, 0x5c,
                        0xaa, 0x30, 0x39, 0x0d, 0xc3, 0xad, 0xa8, 0x80, 0xed,
                        0xd3, 0x19, 0xcc, 0x85, 0xaa, 0x45, 0x52, 0x57, 0x29,
                        0xf4, 0x74, 0x87, 0x67, 0xfb,
                    }
                ),
                tx.Id
            );
        }

        [Fact]
        public void FromBencodexWithActions()
        {
            var bytes = new byte[]
            {
                0x64, 0x37, 0x3a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
                0x6c, 0x64, 0x75, 0x37, 0x3a, 0x74, 0x79, 0x70, 0x65, 0x5f,
                0x69, 0x64, 0x75, 0x36, 0x3a, 0x61, 0x74, 0x74, 0x61, 0x63,
                0x6b, 0x75, 0x36, 0x3a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
                0x64, 0x75, 0x36, 0x3a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
                0x75, 0x33, 0x3a, 0x6f, 0x72, 0x63, 0x75, 0x31, 0x34, 0x3a,
                0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x64,
                0x72, 0x65, 0x73, 0x73, 0x32, 0x30, 0x3a, 0xc2, 0xa8, 0x60,
                0x14, 0x07, 0x3d, 0x66, 0x2a, 0x4a, 0x9b, 0xfc, 0xf9, 0xcb,
                0x54, 0x26, 0x3d, 0xfa, 0x4f, 0x5c, 0xbc, 0x75, 0x36, 0x3a,
                0x77, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x75, 0x34, 0x3a, 0x77,
                0x61, 0x6e, 0x64, 0x65, 0x65, 0x64, 0x75, 0x37, 0x3a, 0x74,
                0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x75, 0x35, 0x3a, 0x73,
                0x6c, 0x65, 0x65, 0x70, 0x75, 0x36, 0x3a, 0x76, 0x61, 0x6c,
                0x75, 0x65, 0x73, 0x64, 0x75, 0x37, 0x3a, 0x7a, 0x6f, 0x6e,
                0x65, 0x5f, 0x69, 0x64, 0x69, 0x31, 0x30, 0x65, 0x65, 0x65,
                0x65, 0x31, 0x30, 0x3a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
                0x5f, 0x6b, 0x65, 0x79, 0x36, 0x35, 0x3a, 0x04, 0x46, 0x11,
                0x5b, 0x01, 0x31, 0xba, 0xcc, 0xf9, 0x4a, 0x58, 0x56, 0xed,
                0xe8, 0x71, 0x29, 0x5f, 0x6f, 0x3d, 0x35, 0x2e, 0x68, 0x47,
                0xcd, 0xa9, 0xc0, 0x3e, 0x89, 0xfe, 0x09, 0xf7, 0x32, 0x80,
                0x87, 0x11, 0xec, 0x97, 0xaf, 0x6e, 0x34, 0x1f, 0x11, 0x0a,
                0x32, 0x6d, 0xa1, 0xbd, 0xb8, 0x1f, 0x5a, 0xe3, 0xba, 0xdf,
                0x76, 0xa9, 0x0b, 0x22, 0xc8, 0xc4, 0x91, 0xae, 0xd3, 0xaa,
                0xa2, 0x96, 0x39, 0x3a, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
                0x75, 0x72, 0x65, 0x37, 0x30, 0x3a, 0x30, 0x44, 0x02, 0x20,
                0x3c, 0x4c, 0xf2, 0x21, 0xff, 0x4c, 0xa8, 0x55, 0xa9, 0x7a,
                0x2f, 0x4b, 0x91, 0x26, 0x34, 0x8d, 0xc5, 0x45, 0x7c, 0x6e,
                0xc0, 0x2c, 0xfb, 0xbf, 0x65, 0x5b, 0xdc, 0xb9, 0x1e, 0x7a,
                0x8b, 0x0f, 0x02, 0x20, 0x5d, 0xb2, 0xad, 0xf0, 0xae, 0xb2,
                0xce, 0x48, 0x44, 0x1b, 0x86, 0x9a, 0x63, 0x86, 0x25, 0xac,
                0x4c, 0xe1, 0x5d, 0x8e, 0x40, 0xb6, 0x95, 0xae, 0x8c, 0xd9,
                0x4e, 0x19, 0x27, 0xaa, 0xdd, 0x03, 0x36, 0x3a, 0x73, 0x69,
                0x67, 0x6e, 0x65, 0x72, 0x32, 0x30, 0x3a, 0xc2, 0xa8, 0x60,
                0x14, 0x07, 0x3d, 0x66, 0x2a, 0x4a, 0x9b, 0xfc, 0xf9, 0xcb,
                0x54, 0x26, 0x3d, 0xfa, 0x4f, 0x5c, 0xbc, 0x39, 0x3a, 0x74,
                0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x75, 0x32,
                0x37, 0x3a, 0x32, 0x30, 0x31, 0x38, 0x2d, 0x31, 0x31, 0x2d,
                0x32, 0x31, 0x54, 0x30, 0x30, 0x3a, 0x30, 0x30, 0x3a, 0x30,
                0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x5a, 0x31,
                0x37, 0x3a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f,
                0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x32,
                0x30, 0x3a, 0xc2, 0xa8, 0x60, 0x14, 0x07, 0x3d, 0x66, 0x2a,
                0x4a, 0x9b, 0xfc, 0xf9, 0xcb, 0x54, 0x26, 0x3d, 0xfa, 0x4f,
                0x5c, 0xbc, 0x65,
            };
            PublicKey publicKey = new PrivateKey(
                new byte[]
                {
                    0xcf, 0x36, 0xec, 0xf9, 0xe4, 0x7c, 0x87, 0x9a, 0x0d, 0xbf,
                    0x46, 0xb2, 0xec, 0xd8, 0x3f, 0xd2, 0x76, 0x18, 0x2a, 0xde,
                    0x02, 0x65, 0x82, 0x5e, 0x3b, 0x8c, 0x6b, 0xa2, 0x14, 0x46,
                    0x7b, 0x76,
                }
            ).PublicKey;
            Transaction<BaseAction> tx =
                Transaction<BaseAction>.FromBencodex(bytes);

            Assert.Equal(publicKey, tx.PublicKey);
            Assert.Equal(
                ImmutableHashSet.Create(new Address(publicKey)),
                tx.UpdatedAddresses
            );
            Assert.Equal(new Address(publicKey), tx.Signer);
            Assert.Equal(new DateTimeOffset(2018, 11, 21, 0, 0, 0, TimeSpan.Zero), tx.Timestamp);
            AssertBytesEqual(
                new byte[]
                {
                    0x30, 0x44, 0x02, 0x20, 0x3c, 0x4c, 0xf2, 0x21, 0xff, 0x4c,
                    0xa8, 0x55, 0xa9, 0x7a, 0x2f, 0x4b, 0x91, 0x26, 0x34, 0x8d,
                    0xc5, 0x45, 0x7c, 0x6e, 0xc0, 0x2c, 0xfb, 0xbf, 0x65, 0x5b,
                    0xdc, 0xb9, 0x1e, 0x7a, 0x8b, 0x0f, 0x02, 0x20, 0x5d, 0xb2,
                    0xad, 0xf0, 0xae, 0xb2, 0xce, 0x48, 0x44, 0x1b, 0x86, 0x9a,
                    0x63, 0x86, 0x25, 0xac, 0x4c, 0xe1, 0x5d, 0x8e, 0x40, 0xb6,
                    0x95, 0xae, 0x8c, 0xd9, 0x4e, 0x19, 0x27, 0xaa, 0xdd, 0x03,
                },
                tx.Signature
            );
            AssertBytesEqual(
                new TxId(
                    new byte[]
                    {
                        0x81, 0x59, 0x7e, 0x7c, 0x3e, 0xe1, 0x49, 0x75, 0xcd,
                        0x85, 0x74, 0x7c, 0xdc, 0xf8, 0x1f, 0xb4, 0x3c, 0x6e,
                        0xeb, 0xd4, 0xde, 0x35, 0x9c, 0x63, 0xd2, 0xc5, 0xdc,
                        0x7b, 0x43, 0x0b, 0x42, 0x6f,
                    }
                ),
                tx.Id
            );

            Assert.Equal(2, tx.Actions.Count());
            Assert.IsType<Attack>(tx.Actions[0]);
            AssertBytesEqual(
                new Address(publicKey).ToByteArray(),
                (byte[])tx.Actions[0].PlainValue["target_address"]
            );
            Assert.Equal(
                new Dictionary<string, object>()
                {
                    { "weapon", "wand" },
                    { "target", "orc" },
                    { "target_address", new Address(publicKey).ToByteArray() },
                },
                tx.Actions[0].PlainValue
            );
            Assert.IsType<Sleep>(tx.Actions[1]);
            Assert.Equal(
                new Dictionary<string, object>()
                {
                    { "zone_id", 10 },
                },
                tx.Actions[1].PlainValue
            );
        }

        [SuppressMessage(
            "Microsoft.StyleCop.CSharp.ReadabilityRules",
            "SA1118",
            Justification = "Long array literals should be multiline.")]
        [Fact]
        public void EvaluateActions()
        {
            Address[] addresses =
            {
                new PrivateKey().PublicKey.ToAddress(),
                new PrivateKey().PublicKey.ToAddress(),
                new PrivateKey().PublicKey.ToAddress(),
            };
            Transaction<BaseAction> tx = Transaction<BaseAction>.Create(
                _fx.PrivateKey,
                new BaseAction[]
                {
                    new Attack
                    {
                        Weapon = "w0",
                        Target = "t0",
                        TargetAddress = addresses[0],
                    },
                    new Attack
                    {
                        Weapon = "w1",
                        Target = "t1",
                        TargetAddress = addresses[1],
                    },
                    new Attack
                    {
                        Weapon = "w2",
                        Target = "t2",
                        TargetAddress = addresses[0],
                    },
                    new DetectRehearsal
                    {
                        TargetAddress = addresses[2],
                    },
                }
            );
            foreach (bool rehearsal in new[] { false, true })
            {
                IAccountStateDelta delta = tx.EvaluateActions(
                    default,
                    1,
                    new AccountStateDeltaImpl(address => null),
                    rehearsal: rehearsal
                );
                Assert.Equal(
                    new Dictionary<Address, object>
                    {
                        [addresses[0]] = new BattleResult(
                            usedWeapons: new[] { "w0", "w2" },
                            targets: new[] { "t0", "t2" }
                        ),
                        [addresses[1]] = new BattleResult(
                            usedWeapons: new[] { "w1" },
                            targets: new[] { "t1" }
                        ),
                        [addresses[2]] = rehearsal,
                    }.ToImmutableDictionary(),
                    delta.GetUpdatedStates()
                );
            }
        }

        [Fact]
        public void Validate()
        {
            PrivateKey privateKey = new PrivateKey(
                new byte[]
                {
                    0xcf, 0x36, 0xec, 0xf9, 0xe4, 0x7c, 0x87, 0x9a, 0x0d, 0xbf,
                    0x46, 0xb2, 0xec, 0xd8, 0x3f, 0xd2, 0x76, 0x18, 0x2a, 0xde,
                    0x02, 0x65, 0x82, 0x5e, 0x3b, 0x8c, 0x6b, 0xa2, 0x14, 0x46,
                    0x7b, 0x76,
                }
            );
            var timestamp = new DateTimeOffset(2018, 11, 21, 0, 0, 0, TimeSpan.Zero);
            Transaction<BaseAction> tx = Transaction<BaseAction>.Create(
                privateKey,
                new BaseAction[0],
                timestamp: timestamp
            );

            tx.Validate();
        }

        [Fact]
        public void DetectBadSignature()
        {
            var rawTx = _fx.Tx.ToRawTransaction(true);
            Transaction<BaseAction> tx = new Transaction<BaseAction>(
                new RawTransaction(
                    rawTx.Signer,
                    rawTx.UpdatedAddresses,
                    rawTx.PublicKey,
                    rawTx.Timestamp,
                    rawTx.Actions,
                    new byte[rawTx.Signature.Length]
                )
            );

            Assert.Throws<InvalidTxSignatureException>(() => tx.Validate());
        }

        [Fact]
        public void DetectAddressMismatch()
        {
            RawTransaction rawTx = GetExpectedRawTransaction(true);
            var mismatchedAddress = new byte[]
            {
                0x45, 0xa2, 0x21, 0x87, 0xe2, 0xd8, 0x85, 0x0b, 0xb3, 0x57,
                0x88, 0x69, 0x58, 0xbc, 0x3e, 0x85, 0x60, 0x92, 0x9c, 0x01,
            };
            byte[] signature =
            {
                0x30, 0x44, 0x02, 0x20, 0x35, 0x7e, 0xa8, 0x4b, 0x07, 0x37,
                0xa1, 0xa6, 0x77, 0x73, 0x02, 0xfc, 0x74, 0x64, 0xca, 0x89,
                0x4f, 0xe4, 0xfe, 0xcd, 0x36, 0x17, 0xef, 0xdd, 0xd4, 0x96,
                0x93, 0x64, 0x11, 0xe0, 0xbc, 0x40, 0x02, 0x20, 0x38, 0x88,
                0x6e, 0x23, 0x64, 0xe2, 0x14, 0x9a, 0x5c, 0xd2, 0x73, 0x1c,
                0xde, 0x2f, 0x3f, 0x6d, 0xec, 0x76, 0xd8, 0xb7, 0x26, 0xfe,
                0x71, 0xa7, 0x36, 0x79, 0x28, 0x2b, 0xba, 0x89, 0x5b, 0x5b,
            };
            var rawTxWithMismatchedAddress = new RawTransaction(
                signer: mismatchedAddress,
                updatedAddresses: rawTx.UpdatedAddresses,
                publicKey: rawTx.PublicKey,
                timestamp: rawTx.Timestamp,
                actions: rawTx.Actions,
                signature: signature
            );
            var tx = new Transaction<BaseAction>(rawTxWithMismatchedAddress);

            Assert.Throws<InvalidTxPublicKeyException>(() => tx.Validate());
        }

        [Fact]
        public void ConvertToRaw()
        {
            var privateKey = new PrivateKey(
                new byte[]
                {
                    0xcf, 0x36, 0xec, 0xf9, 0xe4, 0x7c, 0x87, 0x9a, 0x0d, 0xbf,
                    0x46, 0xb2, 0xec, 0xd8, 0x3f, 0xd2, 0x76, 0x18, 0x2a, 0xde,
                    0x02, 0x65, 0x82, 0x5e, 0x3b, 0x8c, 0x6b, 0xa2, 0x14, 0x46,
                    0x7b, 0x76,
                }
            );
            var timestamp = new DateTimeOffset(2018, 11, 21, 0, 0, 0, TimeSpan.Zero);
            Transaction<BaseAction> tx = Transaction<BaseAction>.Create(
                privateKey,
                new BaseAction[0],
                timestamp: timestamp
            );

            Assert.Equal(
                GetExpectedRawTransaction(false),
                tx.ToRawTransaction(false)
            );
            Assert.Equal(
                GetExpectedRawTransaction(true),
                tx.ToRawTransaction(true)
            );
        }

        [Fact]
        public void ConvertFromRawTransaction()
        {
            RawTransaction rawTx = GetExpectedRawTransaction(true);
            var tx = new Transaction<BaseAction>(rawTx);
            tx.Validate();
        }

        [Fact]
        public void SignatureBufferIsIsolated()
        {
            Transaction<BaseAction> tx = _fx.Tx;
            byte[] sig = tx.Signature;
            for (int i = 0; i < sig.Length; i++)
            {
                sig[i] = 0;
            }

            Assert.NotEqual(new byte[sig.Length], tx.Signature);

            var sig2 = new byte[tx.Signature.Length];
            Array.Copy(tx.Signature, sig2, sig2.Length);
            var tx2 = new Transaction<BaseAction>(
                tx.Signer,
                tx.PublicKey,
                tx.UpdatedAddresses,
                tx.Timestamp,
                tx.Actions,
                sig2
            );
            for (int i = 0; i < sig2.Length; i++)
            {
                sig2[i] = 0;
            }

            Assert.NotEqual(new byte[sig.Length], tx2.Signature);
            AssertBytesEqual(tx.Signature, tx2.Signature);
        }

        [Fact]
        public void ActionsAreIsolatedFromOutside()
        {
            var actions = new List<BaseAction>();
            Transaction<BaseAction> t1 = Transaction<BaseAction>.Create(
                _fx.PrivateKey,
                actions
            );
            var t2 = new Transaction<BaseAction>(
                _fx.PrivateKey.PublicKey.ToAddress(),
                _fx.PrivateKey.PublicKey,
                ImmutableHashSet<Address>.Empty,
                t1.Timestamp,
                actions,
                t1.Signature
            );
            actions.Add(new Sleep());
            Assert.Empty(t1.Actions);
            Assert.Empty(t2.Actions);
        }

        [SuppressMessage(
            "Microsoft.StyleCop.CSharp.ReadabilityRules",
            "SA1118",
            Justification = "Long array literals should be multiline.")]
        internal RawTransaction GetExpectedRawTransaction(bool includeSingature)
        {
            var tx = new RawTransaction(
                signer: new byte[]
                {
                    0xc2, 0xa8, 0x60, 0x14, 0x07, 0x3d, 0x66, 0x2a, 0x4a, 0x9b,
                    0xfc, 0xf9, 0xcb, 0x54, 0x26, 0x3d, 0xfa, 0x4f, 0x5c, 0xbc,
                },
                updatedAddresses: new byte[][] { },
                publicKey: new byte[]
                {
                    0x04, 0x46, 0x11, 0x5b, 0x01, 0x31, 0xba, 0xcc, 0xf9, 0x4a,
                    0x58, 0x56, 0xed, 0xe8, 0x71, 0x29, 0x5f, 0x6f, 0x3d, 0x35,
                    0x2e, 0x68, 0x47, 0xcd, 0xa9, 0xc0, 0x3e, 0x89, 0xfe, 0x09,
                    0xf7, 0x32, 0x80, 0x87, 0x11, 0xec, 0x97, 0xaf, 0x6e, 0x34,
                    0x1f, 0x11, 0x0a, 0x32, 0x6d, 0xa1, 0xbd, 0xb8, 0x1f, 0x5a,
                    0xe3, 0xba, 0xdf, 0x76, 0xa9, 0x0b, 0x22, 0xc8, 0xc4, 0x91,
                    0xae, 0xd3, 0xaa, 0xa2, 0x96,
                },
                timestamp: "2018-11-21T00:00:00.000000Z",
                actions: new List<IDictionary<string, object>>()
            );
            if (!includeSingature)
            {
                return tx;
            }

            byte[] signature =
            {
                0x30, 0x44, 0x02, 0x20, 0x0e, 0xec, 0x2a, 0x53, 0xba, 0x8e,
                0xb0, 0x6f, 0x09, 0x71, 0x00, 0x49, 0xf0, 0xc9, 0x75, 0x71,
                0x70, 0xcf, 0xda, 0x5d, 0xe5, 0xab, 0xd9, 0xd3, 0xfb, 0xa2,
                0xca, 0xa1, 0x30, 0x35, 0x93, 0x70, 0x02, 0x20, 0x7a, 0x4b,
                0xda, 0x5e, 0x6c, 0x5e, 0x3a, 0x4f, 0x5b, 0x6e, 0x5b, 0x54,
                0x9f, 0xf6, 0x99, 0x2d, 0xd0, 0x9a, 0x0d, 0xac, 0xec, 0x83,
                0x20, 0x2b, 0x82, 0x40, 0x0d, 0x6e, 0x5e, 0x9f, 0xbd, 0x2b,
            };
            return tx.AddSignature(signature);
        }
    }
}
