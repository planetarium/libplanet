using System;
using Libplanet.Consensus;
using Libplanet.Crypto;
using Xunit;

namespace Libplanet.Tests.Consensus
{
    public class DominantLotMetadataTest
    {
        private readonly Lot _lot;
        private readonly PrivateKey _prover;
        private readonly PrivateKey _signer;
        private readonly DominantLotMetadata _dominantLotMetadata;

        public DominantLotMetadataTest()
        {
            _prover = new PrivateKey();
            _signer = new PrivateKey();
            _lot = new ConsensusInformation(0, 0, null).ToLot(_prover);
            _dominantLotMetadata = new DominantLotMetadata(
                _lot, DateTimeOffset.MinValue, _signer.PublicKey);
        }

        [Fact]
        public void Constructor()
        {
            var dominantLotMetadata = new DominantLotMetadata(
                _lot, DateTimeOffset.UtcNow, _signer.PublicKey);
            Assert.Equal(0, dominantLotMetadata.Height);
            Assert.Equal(0, dominantLotMetadata.Round);
            Assert.Equal(_lot, dominantLotMetadata.Lot);
            Assert.Equal(_signer.PublicKey, dominantLotMetadata.ValidatorPublicKey);
            Assert.Equal(
                dominantLotMetadata, new DominantLotMetadata(dominantLotMetadata.Bencoded));

            // DominantLotMetadata can be generated by non-prover.
            Assert.NotEqual(_prover.PublicKey, dominantLotMetadata.ValidatorPublicKey);
        }

        [Fact]
        public void Sign()
        {
            var stranger = new PrivateKey();
            _dominantLotMetadata.Sign(_signer);
            Assert.Throws<ArgumentException>(() => _dominantLotMetadata.Sign(stranger));
        }

        [Fact]
        public void Equal()
        {
            Assert.Equal(
                _dominantLotMetadata,
                new DominantLotMetadata(
                    _lot, DateTimeOffset.MinValue, _signer.PublicKey));
            Assert.NotEqual(
                _dominantLotMetadata,
                new DominantLotMetadata(
                    new ConsensusInformation(0, 0, null).ToLot(new PrivateKey()),
                    DateTimeOffset.MinValue,
                    _signer.PublicKey));
            Assert.NotEqual(
                _dominantLotMetadata,
                new DominantLotMetadata(
                    _lot, DateTimeOffset.MaxValue, _signer.PublicKey));
            Assert.NotEqual(
                _dominantLotMetadata,
                new DominantLotMetadata(
                    _lot, DateTimeOffset.MinValue, new PrivateKey().PublicKey));
        }

        [Fact]
        public void HashCode()
        {
            Assert.Equal(
                _dominantLotMetadata.GetHashCode(),
                new DominantLotMetadata(
                    _lot, DateTimeOffset.MinValue, _signer.PublicKey).GetHashCode());
            Assert.NotEqual(
                _dominantLotMetadata.GetHashCode(),
                new DominantLotMetadata(
                    new ConsensusInformation(0, 0, null).ToLot(new PrivateKey()),
                    DateTimeOffset.MinValue,
                    _signer.PublicKey).GetHashCode());
            Assert.NotEqual(
                _dominantLotMetadata.GetHashCode(),
                new DominantLotMetadata(
                    _lot, DateTimeOffset.MaxValue, _signer.PublicKey).GetHashCode());
            Assert.NotEqual(
                _dominantLotMetadata.GetHashCode(),
                new DominantLotMetadata(
                    _lot, DateTimeOffset.MinValue, new PrivateKey().PublicKey).GetHashCode());
        }
    }
}
