{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "definitions": {
    "appsettings": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "id": "https://json.schemastore.org/appsettings.json",
      "title": "JSON schema ASP.NET Core's appsettings.json file",
      "type": "object",
      "properties": {
        "Kestrel": {
          "$ref": "#/definitions/appsettings/definitions/kestrel"
        },
        "Logging": {
          "$ref": "#/definitions/appsettings/definitions/logging"
        },
        "AllowedHosts": {
          "$ref": "#/definitions/appsettings/definitions/allowedHosts"
        },
        "ConnectionStrings": {
          "$ref": "#/definitions/appsettings/definitions/connectionStrings"
        }
      },
      "patternProperties": {
        "^WebOptimizer$": {
          "$ref": "#/definitions/appsettings/definitions/webOptimizer"
        },
        "^webOptimizer$": {
          "$ref": "#/definitions/appsettings/definitions/webOptimizer"
        },
        "^weboptimizer$": {
          "$ref": "#/definitions/appsettings/definitions/webOptimizer"
        },
        "^(cdn|Cdn)$": {
          "$ref": "#/definitions/appsettings/definitions/cdn"
        },
        "^(pwa|PWA|Pwa)$": {
          "$ref": "#/definitions/appsettings/definitions/pwa"
        },
        "^(ElmahIo|Elmahio|elmahIo|elmahio)$": {
          "$ref": "#/definitions/appsettings/definitions/ElmahIo"
        },
        "^(nlog|Nlog|NLog)$": {
          "$ref": "#/definitions/appsettings/definitions/NLog"
        },
        "^(Serilog|serilog)$": {
          "$ref": "#/definitions/appsettings/definitions/Serilog"
        }
      },
      "definitions": {
        "webOptimizer": {
          "title": "web optimizer",
          "type": "object",
          "description": "Settings for WebOptimizer.Core",
          "properties": {
            "enableCaching": {
              "type": "boolean",
              "description": "Determines if the \"cache-control\" HTTP headers should be set and if conditional GET (304) requests should be supported. This could be helpful to disable while in development mode."
            },
            "enableTagHelperBundling": {
              "type": "boolean",
              "description": "Determines if `<script>` and `<link>` elements should point to the bundled path or a reference per source file should be created. This is helpful to disable when in development mode.",
              "default": true
            }
          }
        },
        "cdn": {
          "title": "CDN",
          "type": "object",
          "description": "Definitions for WebEssentials.AspNetCore.CdnTagHelpers",
          "properties": {
            "url": {
              "type": "string",
              "description": "An absolute URL used as a prefix for static resources",
              "pattern": "^((//|https?://).+|)$"
            },
            "prefetch": {
              "type": "boolean",
              "description": "If true, injects a <link rel='dns-prefetch'> tag that speeds up DNS resolution to the CDN.",
              "default": true
            }
          }
        },
        "pwa": {
          "properties": {
            "cacheId": {
              "type": "string",
              "description": "The cache identifier of the service worker (can be any string). Change this property to force the service worker to reload in browsers.",
              "default": "v1.0"
            },
            "offlineRoute": {
              "type": "string",
              "description": "The route to the page to show when offline.",
              "default": "/offline.html"
            },
            "registerServiceWorker": {
              "type": "boolean",
              "description": "Determines if a script that registers the service worker should be injected into the bottom of the HTML page.",
              "default": true
            },
            "registerWebmanifest": {
              "type": "boolean",
              "description": "Determines if a meta tag that points to the web manifest should be inserted at the end of the head element.",
              "default": true
            },
            "routesToPreCache": {
              "type": "string",
              "description": "A comma separated list of routes to pre-cache when service worker installs in the browser.",
              "default": ""
            },
            "strategy": {
              "description": "Selects one of the predefined service worker types.",
              "default": "cacheFirstSafe",
              "enum": [
                "cacheFirst",
                "cacheFirstSafe",
                "minimal",
                "networkFirst"
              ]
            }
          }
        },
        "ElmahIo": {
          "required": [
            "ApiKey",
            "LogId"
          ],
          "properties": {
            "ApiKey": {
              "type": "string",
              "description": "An elmah.io API key with the Messages | Write permission.",
              "pattern": "^([0-9a-f]{32})|(#\\{.*\\}#?)$"
            },
            "LogId": {
              "type": "string",
              "description": "The Id of the elmah.io log to store messages in.",
              "pattern": "^([0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12})|(#\\{.*\\}#?)$"
            },
            "Application": {
              "type": "string",
              "description": "An application name to put on all error messages."
            },
            "HandledStatusCodesToLog": {
              "type": "array",
              "description": "A list of HTTP status codes (besides 404) to log even though no exception is thrown.",
              "items": {
                "type": "integer"
              }
            },
            "TreatLoggingAsBreadcrumbs": {
              "type": "boolean",
              "description": "Include log messages from Microsoft.Extensions.Logging as breadcrumbs."
            },
            "HeartbeatId": {
              "type": "string",
              "description": "The Id of the elmah.io heartbeat to notify.",
              "pattern": "^([0-9a-f]{32})|(#\\{.*\\}#?)$"
            }
          }
        },
        "protocols": {
          "type": "string",
          "description": "The protocols enabled on the endpoint.",
          "enum": [
            "None",
            "Http1",
            "Http2",
            "Http1AndHttp2",
            "Http3",
            "Http1AndHttp2AndHttp3"
          ]
        },
        "certificate": {
          "title": "certificate",
          "type": "object",
          "description": "Certificate configuration.",
          "properties": {
            "Path": {
              "type": "string",
              "description": "The certificate file path. If a file path is specified then the certificate will be loaded from the file system."
            },
            "KeyPath": {
              "type": "string",
              "description": "The certificate key file path. Available in .NET 5 and later."
            },
            "Password": {
              "type": "string",
              "description": "The certificate password used to access the private key."
            },
            "Subject": {
              "type": "string",
              "description": "The certificate subject. If a subject is specified then the certificate will be loaded from the certificate store."
            },
            "Store": {
              "type": "string",
              "description": "The certificate store name. Defaults to 'My'.",
              "default": "My"
            },
            "Location": {
              "type": "string",
              "description": "The certificate store location. Defaults to 'CurrentUser'.",
              "default": "CurrentUser",
              "enum": [
                "LocalMachine",
                "CurrentUser"
              ]
            },
            "AllowInvalid": {
              "type": "boolean",
              "description": "A value indicating whether or not to load certificates that are considered invalid. Defaults to false.",
              "default": false
            }
          }
        },
        "sslProtocols": {
          "type": "array",
          "description": "Specifies allowable SSL protocols. Defaults to 'None' which allows the operating system to choose the best protocol to use, and to block protocols that are not secure. Unless your app has a specific reason not to, you should use this default. Available in .NET 5 and later.",
          "items": {
            "type": "string",
            "default": "None",
            "enum": [
              "None",
              "Tls",
              "Tls11",
              "Tls12",
              "Tls13"
            ]
          }
        },
        "clientCertificateMode": {
          "type": "string",
          "description": "Specifies the client certificate requirements for a HTTPS connection. Defaults to 'NoCertificate'. Available in .NET 5 and later.",
          "default": "NoCertificate",
          "enum": [
            "NoCertificate",
            "AllowCertificate",
            "RequireCertificate"
          ]
        },
        "kestrel": {
          "title": "kestrel",
          "type": "object",
          "description": "ASP.NET Core Kestrel server configuration.",
          "properties": {
            "Endpoints": {
              "title": "endpoints",
              "type": "object",
              "description": "Endpoints that Kestrel listens to for network requests. Each endpoint has a name specified by its JSON property name.",
              "additionalProperties": {
                "title": "endpoint options",
                "type": "object",
                "description": "Kestrel endpoint configuration.",
                "required": [
                  "Url"
                ],
                "properties": {
                  "Url": {
                    "type": "string",
                    "description": "The scheme, host name, and port the endpoint will listen on. A Url is required.",
                    "format": "uri"
                  },
                  "Protocols": {
                    "$ref": "#/definitions/appsettings/definitions/protocols"
                  },
                  "SslProtocols": {
                    "$ref": "#/definitions/appsettings/definitions/sslProtocols"
                  },
                  "Certificate": {
                    "$ref": "#/definitions/appsettings/definitions/certificate"
                  },
                  "ClientCertificateMode": {
                    "$ref": "#/definitions/appsettings/definitions/clientCertificateMode"
                  },
                  "Sni": {
                    "title": "SNI",
                    "type": "object",
                    "description": "Server Name Indication (SNI) configuration. This enables the mapping of client requested host names to certificates and other TLS settings. Wildcard names prefixed with '*.', as well as a top level '*' are supported. Available in .NET 5 and later.",
                    "additionalProperties": {
                      "title": "SNI options",
                      "type": "object",
                      "description": "Endpoint SNI configuration.",
                      "properties": {
                        "Protocols": {
                          "$ref": "#/definitions/appsettings/definitions/protocols"
                        },
                        "SslProtocols": {
                          "$ref": "#/definitions/appsettings/definitions/sslProtocols"
                        },
                        "Certificate": {
                          "$ref": "#/definitions/appsettings/definitions/certificate"
                        },
                        "ClientCertificateMode": {
                          "$ref": "#/definitions/appsettings/definitions/clientCertificateMode"
                        }
                      }
                    }
                  }
                }
              }
            },
            "EndpointDefaults": {
              "title": "endpoint defaults",
              "type": "object",
              "description": "Default configuration applied to all endpoints. Named endpoint specific configuration overrides defaults.",
              "properties": {
                "Protocols": {
                  "$ref": "#/definitions/appsettings/definitions/protocols"
                },
                "SslProtocols": {
                  "$ref": "#/definitions/appsettings/definitions/sslProtocols"
                },
                "ClientCertificateMode": {
                  "$ref": "#/definitions/appsettings/definitions/clientCertificateMode"
                }
              }
            },
            "Certificates": {
              "title": "certificates",
              "type": "object",
              "description": "Certificates that Kestrel uses with HTTPS endpoints. Each certificate has a name specified by its JSON property name. The 'Default' certificate is used by HTTPS endpoints that haven't specified a certificate.",
              "additionalProperties": {
                "$ref": "#/definitions/appsettings/definitions/certificate"
              }
            }
          }
        },
        "logLevelThreshold": {
          "type": "string",
          "description": "Log level threshold.",
          "enum": [
            "Trace",
            "Debug",
            "Information",
            "Warning",
            "Error",
            "Critical",
            "None"
          ]
        },
        "logLevel": {
          "title": "logging level options",
          "type": "object",
          "description": "Log level configurations used when creating logs. Only logs that exceeds its matching log level will be enabled. Each log level configuration has a category specified by its JSON property name. For more information about configuring log levels, see https://docs.microsoft.com/aspnet/core/fundamentals/logging/#configure-logging.",
          "additionalProperties": {
            "$ref": "#/definitions/appsettings/definitions/logLevelThreshold"
          }
        },
        "logging": {
          "title": "logging options",
          "type": "object",
          "description": "Configuration for Microsoft.Extensions.Logging.",
          "additionalProperties": {
            "title": "provider logging settings",
            "type": "object",
            "description": "Logging configuration for a provider. The provider name must match the configuration's JSON property property name.",
            "properties": {
              "LogLevel": {
                "$ref": "#/definitions/appsettings/definitions/logLevel"
              }
            }
          },
          "properties": {
            "LogLevel": {
              "$ref": "#/definitions/appsettings/definitions/logLevel"
            },
            "Console": {
              "properties": {
                "LogLevel": {
                  "$ref": "#/definitions/appsettings/definitions/logLevel"
                },
                "FormatterName": {
                  "type": "string",
                  "description": "Name of the log message formatter to use. Defaults to 'simple'.",
                  "default": "simple"
                },
                "FormatterOptions": {
                  "title": "formatter options",
                  "type": "object",
                  "description": "Log message formatter options. Additional properties are available on the options depending on the configured formatter. The formatter is specified by FormatterName.",
                  "properties": {
                    "IncludeScopes": {
                      "type": "boolean",
                      "description": "Include scopes when true. Defaults to false.",
                      "default": false
                    },
                    "TimestampFormat": {
                      "type": "string",
                      "description": "Format string used to format timestamp in logging messages. Defaults to null."
                    },
                    "UseUtcTimestamp": {
                      "type": "boolean",
                      "description": "Indication whether or not UTC timezone should be used to for timestamps in logging messages. Defaults to false.",
                      "default": false
                    }
                  }
                },
                "LogToStandardErrorThreshold": {
                  "description": "The minimum level of messages are written to Console.Error.",
                  "$ref": "#/definitions/appsettings/definitions/logLevelThreshold"
                }
              }
            },
            "EventSource": {
              "properties": {
                "LogLevel": {
                  "$ref": "#/definitions/appsettings/definitions/logLevel"
                }
              }
            },
            "Debug": {
              "properties": {
                "LogLevel": {
                  "$ref": "#/definitions/appsettings/definitions/logLevel"
                }
              }
            },
            "EventLog": {
              "properties": {
                "LogLevel": {
                  "$ref": "#/definitions/appsettings/definitions/logLevel"
                }
              }
            },
            "ElmahIo": {
              "properties": {
                "LogLevel": {
                  "$ref": "#/definitions/appsettings/definitions/logLevel"
                }
              }
            },
            "ElmahIoBreadcrumbs": {
              "properties": {
                "LogLevel": {
                  "$ref": "#/definitions/appsettings/definitions/logLevel"
                }
              }
            }
          }
        },
        "allowedHosts": {
          "type": "string",
          "description": "ASP.NET Core host filtering middleware configuration. Allowed hosts is a semicolon-delimited list of host names without port numbers. Requests without a matching host name will be refused. Host names may be prefixed with a '*.' wildcard, or use '*' to allow all hosts."
        },
        "connectionStrings": {
          "title": "connection string options",
          "type": "object",
          "description": "Connection string configuration. Get connection strings with the IConfiguration.GetConnectionString(string) extension method.",
          "additionalProperties": {
            "type": "string",
            "description": "Connection string configuration. Each connection string has a name specified by its JSON property name."
          }
        },
        "NLog": {
          "title": "NLog options",
          "type": "object",
          "description": "NLog configuration",
          "default": {},
          "properties": {
            "autoReload": {
              "type": "boolean",
              "description": "Automatically reload the NLog configuration when notified that appsettings.json file has changed.",
              "default": false
            },
            "throwConfigExceptions": {
              "type": [
                "boolean",
                "null"
              ],
              "description": "Throws an exception when there is a config error? If not set, then throwExceptions will be used for this setting.",
              "default": false
            },
            "throwExceptions": {
              "type": "boolean",
              "description": "Throws an exception when there is an error. For unit testing only and advanced troubleshooting.",
              "default": false
            },
            "internalLogLevel": {
              "type": "string",
              "description": "The minimal log level for the internal logger.",
              "default": "Off",
              "enum": [
                "Trace",
                "Debug",
                "Info",
                "Warn",
                "Error",
                "Fatal",
                "Off"
              ]
            },
            "internalLogFile": {
              "type": "string",
              "description": "Write internal log to the specified filepath"
            },
            "internalLogToConsole": {
              "type": "boolean",
              "description": "Write internal log to a console",
              "default": "false"
            },
            "internalLogToConsoleError": {
              "type": "boolean",
              "description": "Write internal log to a console with error stream",
              "default": "false"
            },
            "globalThreshold": {
              "type": "string",
              "description": "Log events below this threshold are not logged.",
              "default": "Off",
              "enum": [
                "Trace",
                "Debug",
                "Info",
                "Warn",
                "Error",
                "Fatal",
                "Off"
              ]
            },
            "autoShutdown": {
              "type": "boolean",
              "description": "Automatically call `LogFactory.Shutdown` on AppDomain.Unload or AppDomain.ProcessExit",
              "default": "true"
            },
            "extensions": {
              "type": "array",
              "description": "Load NLog extension packages for additional targets and layouts",
              "default": [],
              "items": {
                "title": "extension",
                "type": "object",
                "description": "",
                "default": {},
                "properties": {
                  "assembly": {
                    "type": "string",
                    "description": "Assembly Name of the NLog extension package."
                  },
                  "prefix": {
                    "type": "string",
                    "description": "Appends prefix to all type-names loaded from the assembly",
                    "default": ""
                  },
                  "assemblyFile": {
                    "type": "string",
                    "description": "Absolute filepath to the Assembly-file of the NLog extension package.",
                    "default": ""
                  }
                }
              }
            },
            "variables": {
              "title": "variables",
              "type": "object",
              "description": "Key-value pair of variables",
              "patternProperties": {
                ".*": {
                  "type": [
                    "boolean",
                    "number",
                    "string"
                  ]
                }
              },
              "propertyNames": {
                "pattern": "^[A-Za-z0-9_.-]+$"
              }
            },
            "targetDefaultWrapper": {
              "title": "default wrapper",
              "type": "object",
              "description": "Wrap all defined targets with this custom target wrapper.",
              "default": {},
              "required": [
                "type"
              ],
              "properties": {
                "type": {
                  "type": "string",
                  "description": ""
                }
              }
            },
            "targets": {
              "title": "targets",
              "type": "object",
              "description": "",
              "default": {},
              "properties": {
                "async": {
                  "type": "boolean",
                  "description": "Wrap all defined targets using AsyncWrapper with OverflowAction=Discard for better performance."
                }
              }
            },
            "rules": {
              "oneOf": [
                {
                  "type": "array",
                  "description": "",
                  "default": [],
                  "items": {
                    "$ref": "#/definitions/appsettings/definitions/NLogRulesItem"
                  }
                },
                {
                  "title": "rules",
                  "type": "object",
                  "patternProperties": {
                    ".*": {
                      "$ref": "#/definitions/appsettings/definitions/NLogRulesItem"
                    }
                  },
                  "propertyNames": {
                    "pattern": "^[0-9]+$"
                  }
                }
              ]
            }
          }
        },
        "NLogRulesItem": {
          "title": "NLog rule item",
          "type": "object",
          "description": "Redirect LogEvents from matching Logger objects to specified targets",
          "default": {},
          "required": [
            "logger"
          ],
          "properties": {
            "logger": {
              "type": "string",
              "description": "Match Logger objects based on their Logger-name. Can use wildcard characters ('*' or '?')."
            },
            "ruleName": {
              "type": "string",
              "description": "Rule identifier to allow rule lookup with Configuration.FindRuleByName and Configuration.RemoveRuleByName."
            },
            "level": {
              "anyOf": [
                {
                  "type": "string",
                  "description": "",
                  "enum": [
                    "Trace",
                    "Debug",
                    "Info",
                    "Warn",
                    "Error",
                    "Fatal"
                  ]
                },
                {
                  "type": "string"
                }
              ]
            },
            "levels": {
              "type": "string",
              "description": "Comma separated list of levels that this rule matches."
            },
            "minLevel": {
              "anyOf": [
                {
                  "type": "string",
                  "description": "",
                  "enum": [
                    "Trace",
                    "Debug",
                    "Info",
                    "Warn",
                    "Error",
                    "Fatal"
                  ]
                },
                {
                  "type": "string"
                }
              ]
            },
            "maxLevel": {
              "anyOf": [
                {
                  "type": "string",
                  "description": "",
                  "enum": [
                    "Trace",
                    "Debug",
                    "Info",
                    "Warn",
                    "Error",
                    "Fatal"
                  ]
                },
                {
                  "type": "string"
                }
              ]
            },
            "finalMinLevel": {
              "anyOf": [
                {
                  "type": "string",
                  "description": "",
                  "enum": [
                    "Trace",
                    "Debug",
                    "Info",
                    "Warn",
                    "Error",
                    "Fatal"
                  ]
                },
                {
                  "type": "string"
                }
              ]
            },
            "writeTo": {
              "type": "string",
              "description": "Name or names of a target - separated by comma. Remove this property for sending events to the blackhole."
            },
            "final": {
              "type": "boolean",
              "description": "Ignore further rules if this one matches.",
              "default": false
            },
            "enabled": {
              "type": "boolean",
              "description": "",
              "default": true
            },
            "filters": {
              "oneOf": [
                {
                  "type": "array",
                  "description": "",
                  "default": [],
                  "items": {
                    "title": "filter",
                    "type": "object",
                    "description": "",
                    "default": {},
                    "required": [
                      "type"
                    ],
                    "properties": {
                      "type": {
                        "type": "string",
                        "description": ""
                      },
                      "action": {
                        "type": "string",
                        "description": "Result action when filter matches logevent.",
                        "default": "Neutral",
                        "enum": [
                          "Neutral",
                          "Log",
                          "Ignore",
                          "LogFinal",
                          "IgnoreFinal"
                        ]
                      }
                    }
                  }
                },
                {
                  "title": "filter",
                  "type": "object",
                  "description": "",
                  "default": {}
                }
              ]
            },
            "filterDefaultAction": {
              "type": "string",
              "description": "Default action if none of the filters match.",
              "default": "Ignore",
              "enum": [
                "Neutral",
                "Log",
                "Ignore",
                "LogFinal",
                "IgnoreFinal"
              ]
            }
          }
        },
        "Serilog": {
          "title": "Serilog appSettings",
          "type": "object",
          "description": "Serilog appSettings Configuration",
          "additionalProperties": false,
          "properties": {
            "$schema": {
              "title": "Schema",
              "type": "string",
              "description": "Pointer to the schema against which this document should be validated."
            },
            "Using": {
              "title": "List of Auto-discovery of configuration assemblies",
              "type": "array",
              "description": "Using section contains list of assemblies in which configuration methods. Can be required depending of the project type: See: https://github.com/serilog/serilog-settings-configuration#using-section-and-auto-discovery-of-configuration-assemblies",
              "uniqueItems": true,
              "items": {
                "$ref": "#/definitions/appsettings/definitions/Serilog/definitions/AssemblyReference"
              }
            },
            "LevelSwitches": {
              "type": "object",
              "additionalProperties": false,
              "patternProperties": {
                "^(?<SerilogLevelSwitcherName>\\${0,1}[A-Za-z]+[A-Za-z0-9]*)$": {
                  "$ref": "#/definitions/appsettings/definitions/Serilog/definitions/SerilogLogEventLevel"
                }
              }
            },
            "FilterSwitches": {
              "type": "object",
              "additionalProperties": false,
              "patternProperties": {
                "^(?<SerilogLevelSwitcherName>\\${0,1}[A-Za-z]+[A-Za-z0-9]*)$": {
                  "type": "string"
                }
              }
            },
            "MinimumLevel": {
              "title": "Minimum LogLevel Threshold",
              "type": [
                "object",
                "string"
              ],
              "description": "Minimum LogLevel Threshold. (Support dynamic reload if the underlying IConfigurationProvider supports it)",
              "oneOf": [
                {
                  "$ref": "#/definitions/appsettings/definitions/Serilog/definitions/SerilogLogEventLevel"
                },
                {
                  "$ref": "#/definitions/appsettings/definitions/Serilog/definitions/DetailedMinimumLevel"
                }
              ]
            },
            "Properties": {
              "title": "Log events Properties",
              "type": "object",
              "description": "This section defines a static list of key-value pairs that will enrich log events.",
              "additionalProperties": {
                "type": "string"
              }
            },
            "Enrich": {
              "title": "Log events Enriches",
              "description": "This section defines Enriches that will be applied to log events.",
              "allOf": [
                {
                  "$ref": "#/definitions/appsettings/definitions/Serilog/definitions/MethodCallReference"
                }
              ]
            },
            "Destructure": {
              "title": "Log events Destructure",
              "description": "This section defines Destructure.",
              "allOf": [
                {
                  "$ref": "#/definitions/appsettings/definitions/Serilog/definitions/MethodCallReference"
                }
              ]
            },
            "Filter": {
              "title": "Log events filters",
              "description": "This section defines filters that will be applied to log events.",
              "allOf": [
                {
                  "$ref": "#/definitions/appsettings/definitions/Serilog/definitions/MethodCallReference"
                }
              ]
            },
            "WriteTo": {
              "title": "Configuration for log destination",
              "description": "This section configures the sinks that log events will be emitted to.",
              "allOf": [
                {
                  "$ref": "#/definitions/appsettings/definitions/Serilog/definitions/MethodCallReference"
                }
              ]
            },
            "AuditTo": {
              "title": "Configuration for log destination for auditing",
              "description": "This section configures sinks for auditing, instead of regular (safe) logging. Obs: When auditing is used, exceptions from sinks and any intermediate filters propagate back to the caller.",
              "allOf": [
                {
                  "$ref": "#/definitions/appsettings/definitions/Serilog/definitions/MethodCallReference"
                }
              ]
            }
          },
          "patternProperties": {
            "^Enrich:((?<EnvironmentVariableName>[a-zA-Z_]\\w*)|(?<ArrayIndex>\\d*))$": {
              "title": "Log events Enriches",
              "description": "This section defines Enriches that will be applied to log events.",
              "allOf": [
                {
                  "$ref": "#/definitions/appsettings/definitions/Serilog/definitions/MethodCallReferenceItem"
                }
              ]
            },
            "^Destructure:((?<EnvironmentVariableName>[a-zA-Z_]\\w*)|(?<ArrayIndex>\\d*))$": {
              "title": "Log events Destructure",
              "description": "This section defines Destructure.",
              "allOf": [
                {
                  "$ref": "#/definitions/appsettings/definitions/Serilog/definitions/MethodCallReferenceItem"
                }
              ]
            },
            "^Filter:((?<EnvironmentVariableName>[a-zA-Z_]\\w*)|(?<ArrayIndex>\\d*))$": {
              "title": "Log events filters",
              "description": "This section defines filters that will be applied to log events.",
              "allOf": [
                {
                  "$ref": "#/definitions/appsettings/definitions/Serilog/definitions/MethodCallReferenceItem"
                }
              ]
            },
            "^WriteTo:((?<EnvironmentVariableName>[a-zA-Z_]\\w*)|(?<ArrayIndex>\\d*))$": {
              "title": "Configuration for log destination",
              "description": "This section configures the sinks that log events will be emitted to.",
              "allOf": [
                {
                  "$ref": "#/definitions/appsettings/definitions/Serilog/definitions/MethodCallReferenceItem"
                }
              ]
            },
            "^AuditTo:((?<EnvironmentVariableName>[a-zA-Z_]\\w*)|(?<ArrayIndex>\\d*))$": {
              "title": "Configuration for log destination for auditing",
              "description": "This section configures sinks for auditing, instead of regular (safe) logging. Obs: When auditing is used, exceptions from sinks and any intermediate filters propagate back to the caller.",
              "allOf": [
                {
                  "$ref": "#/definitions/appsettings/definitions/Serilog/definitions/MethodCallReferenceItem"
                }
              ]
            }
          },
          "definitions": {
            "SerilogLogEventLevel": {
              "title": "Log level",
              "type": "string",
              "description": "Log level threshold.",
              "enum": [
                "Verbose",
                "Debug",
                "Information",
                "Warning",
                "Error",
                "Fatal"
              ]
            },
            "LoggingLevelSwitch": {
              "title": "LevelSwitches name",
              "type": "string",
              "description": "Log Level Switch string reference.",
              "pattern": "^(?<SerilogLevelSwitcherName>\\${0,1}[A-Za-z]+[A-Za-z0-9]*)$"
            },
            "SerilogLogLevelThreshold": {
              "title": "Log Level or LevelSwitches name",
              "type": "string",
              "description": "A Serilog Log Level or a reference to a Log Level Switch name on `LevelSwitches` configuration.",
              "anyOf": [
                {
                  "$ref": "#/definitions/appsettings/definitions/Serilog/definitions/SerilogLogEventLevel"
                },
                {
                  "$ref": "#/definitions/appsettings/definitions/Serilog/definitions/LoggingLevelSwitch"
                }
              ]
            },
            "DetailedMinimumLevel": {
              "title": "Detailed Log level.",
              "type": "object",
              "description": "Detailed Log level threshold object. Allowing set log levels be overridden per logging source.",
              "additionalProperties": false,
              "properties": {
                "Default": {
                  "$ref": "#/definitions/appsettings/definitions/Serilog/definitions/SerilogLogLevelThreshold"
                },
                "ControlledBy": {
                  "$ref": "#/definitions/appsettings/definitions/Serilog/definitions/LoggingLevelSwitch"
                },
                "Override": {
                  "title": "Logging Source Log level object.",
                  "type": "object",
                  "description": "Set the Log level threshold or LevelSwitcher reference per Logging Source.",
                  "additionalProperties": {
                    "$ref": "#/definitions/appsettings/definitions/Serilog/definitions/SerilogLogLevelThreshold"
                  }
                }
              }
            },
            "AssemblyReference": {
              "title": "Assembly Name",
              "type": "string",
              "description": ".NET Assembly Name, without the file extension",
              "minLength": 1,
              "pattern": "^(?<AssemblyName>\\S+)$"
            },
            "ComplexMethodCallReference": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "Name"
              ],
              "properties": {
                "Name": {
                  "$ref": "#/definitions/appsettings/definitions/Serilog/definitions/CSharpMethodName"
                },
                "Args": {
                  "type": "object",
                  "additionalProperties": false,
                  "patternProperties": {
                    "^(?<CSharpMethodArgumentName>[a-zA-Z_]\\w*)$": {}
                  }
                }
              }
            },
            "MethodCallReferenceItem": {
              "type": [
                "null",
                "object",
                "string"
              ],
              "oneOf": [
                {
                  "$ref": "#/definitions/appsettings/definitions/Serilog/definitions/CSharpMethodName"
                },
                {
                  "$ref": "#/definitions/appsettings/definitions/Serilog/definitions/ComplexMethodCallReference"
                }
              ]
            },
            "MethodCallReference": {
              "type": [
                "array",
                "object",
                "string"
              ],
              "minLength": 1,
              "pattern": "^(?<CSharpMethodName>[a-zA-Z_]\\w*)$",
              "minItems": 1,
              "uniqueItems": true,
              "additionalProperties": {
                "$ref": "#/definitions/appsettings/definitions/Serilog/definitions/MethodCallReferenceItem"
              },
              "items": {
                "$ref": "#/definitions/appsettings/definitions/Serilog/definitions/MethodCallReferenceItem"
              }
            },
            "CSharpMethodName": {
              "title": "Method Name",
              "type": "string",
              "description": "A name referring to a C# Class method",
              "minLength": 1,
              "pattern": "^(?<CSharpMethodName>[a-zA-Z_]\\w*)$"
            },
            "CSharpMethodArgumentName": {
              "title": "Argument Name",
              "type": "string",
              "description": "A name referring to a C# Class method argument",
              "minLength": 1,
              "pattern": "^(?<CSharpMethodArgumentName>[a-zA-Z_]\\w*)$"
            },
            "EnvironmentVariableName": {
              "title": "Environment Variable Name",
              "type": "string",
              "description": "A name referring to a OS Environment Variable",
              "minLength": 1,
              "pattern": "^(?<EnvironmentVariableName>[a-zA-Z_]\\w*)$"
            },
            "SerilogLevelSwitcherName": {
              "title": "A Level Switcher Name",
              "type": "string",
              "description": "A name referring to a Serilog Settings Configuration Level Switcher",
              "minLength": 1,
              "pattern": "^(?<SerilogLevelSwitcherName>\\${0,1}[A-Za-z]+[A-Za-z0-9]*)$"
            }
          }
        }
      }
    },
    "Explorer": {
      "title": "ExplorerOptions",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "IsEnabled": {
          "type": "boolean",
          "default": true
        }
      }
    },
    "Genesis": {
      "title": "GenesisOptions",
      "type": "object",
      "description": "Options for the genesis block.",
      "additionalProperties": false,
      "properties": {
        "GenesisKey": {
          "type": "string",
          "description": "The key of the genesis block.",
          "pattern": "^[0-9a-fA-F]{64}$"
        },
        "Validators": {
          "type": "array",
          "description": "Public keys of the validators.",
          "items": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{130}|[0-9a-fA-F]{66}$"
          }
        },
        "Timestamp": {
          "type": "string",
          "description": "The timestamp of the genesis block.",
          "format": "date-time"
        },
        "GenesisBlockPath": {
          "type": "string",
          "description": "The path of the genesis block."
        }
      }
    },
    "Solo": {
      "title": "SoloOptions",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "IsEnabled": {
          "type": "boolean"
        },
        "BlockInterval": {
          "type": "integer",
          "format": "int64"
        },
        "PrivateKey": {
          "type": "string",
          "description": "The private key of the node.",
          "pattern": "^[0-9a-fA-F]{64}$"
        }
      }
    },
    "Store": {
      "title": "StoreOptions",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "Type": {
          "description": "The type of the store.",
          "oneOf": [
            {
              "$ref": "#/definitions/Store/definitions/StoreType"
            }
          ]
        },
        "RootPath": {
          "type": "string",
          "description": "The root directory path of the store."
        },
        "StoreName": {
          "type": "string",
          "description": "The directory name of the store to be created under RootPath. If not specified,the default value is 'store'."
        },
        "StateStoreName": {
          "type": "string",
          "description": "The directory name of the state store to be created under RootPath. If not specified,the default value is 'state'."
        }
      },
      "definitions": {
        "StoreType": {
          "type": "string",
          "description": "",
          "enum": [
            "Disk",
            "Memory"
          ]
        }
      }
    },
    "Swarm": {
      "title": "SwarmOptions",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "IsEnabled": {
          "type": "boolean"
        },
        "PrivateKey": {
          "type": "string",
          "description": "The private key of the node.",
          "pattern": "^[0-9a-fA-F]{64}$"
        },
        "EndPoint": {
          "type": "string",
          "pattern": "^(?:(?:[a-zA-Z0-9\\-\\.]+)|(?:\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})):\\d{1,5}$"
        },
        "AppProtocolVersion": {
          "type": "string",
          "description": "The version of the application protocol.",
          "pattern": "^(?<version>\\d+)/(?<address>[0-9a-fA-F]{40})/(?<signature>(?:[A-Za-z0-9+\\.]{4})*(?:[A-Za-z0-9+\\.]{2}==|[A-Za-z0-9+\\.]{3}=)?)/(?<extra>(?:[A-Za-z0-9+\\.]{4})*(?:[A-Za-z0-9+\\.]{2}==|[A-Za-z0-9+\\.]{3}=)?)$"
        },
        "BlocksyncSeedPeer": {
          "type": "string",
          "description": "The endpoint of the node to block sync.",
          "pattern": "^$|^(?:[0-9a-fA-F]{130}|[0-9a-fA-F]{66}),(?:(?:[a-zA-Z0-9\\-\\.]+)|(?:\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})),\\d{1,5}$"
        }
      }
    },
    "Validator": {
      "title": "ValidatorOptions",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "IsEnabled": {
          "type": "boolean",
          "default": true
        },
        "EndPoint": {
          "type": "string",
          "pattern": "^(?:(?:[a-zA-Z0-9\\-\\.]+)|(?:\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})):\\d{1,5}$"
        },
        "ConsensusSeedPeer": {
          "type": "string",
          "description": "The endpoint of the node to consensus.",
          "pattern": "^$|^(?:[0-9a-fA-F]{130}|[0-9a-fA-F]{66}),(?:(?:[a-zA-Z0-9\\-\\.]+)|(?:\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})),\\d{1,5}$"
        }
      }
    }
  },
  "allOf": [
    {
      "$ref": "#/definitions/appsettings"
    },
    {
      "type": "object",
      "properties": {
        "Explorer": {
          "description": "Type 'ExplorerOptions' does not have a description.",
          "$ref": "#/definitions/Explorer"
        },
        "Genesis": {
          "description": "Options for the genesis block.",
          "$ref": "#/definitions/Genesis"
        },
        "Solo": {
          "description": "Type 'SoloOptions' does not have a description.",
          "$ref": "#/definitions/Solo"
        },
        "Store": {
          "description": "Type 'StoreOptions' does not have a description.",
          "$ref": "#/definitions/Store"
        },
        "Swarm": {
          "description": "Type 'SwarmOptions' does not have a description.",
          "$ref": "#/definitions/Swarm"
        },
        "Validator": {
          "description": "Type 'ValidatorOptions' does not have a description.",
          "$ref": "#/definitions/Validator"
        }
      }
    }
  ]
}
