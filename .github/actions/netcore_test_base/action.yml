name: netcore_test_base
inputs:
  collect_tests_from:
    required: false
    default: ".tests.txt"
  locale:
    required: false
    default: en_US.UTF-8
  code_coverage:
    required: false
    default: true
runs:
  using: composite
  steps:
  - name: restore_cache
    uses: actions/cache@v3.3.2
    with:
      key: v1-dotcover-{{ arch }}
      path: UPDATE_ME
      restore-keys: v1-dotcover-{{ arch }}
    if: "${{ inputs.code_coverage }}"
  - name: Install JetBrains dotCover
    run: dotnet tool install --global JetBrains.dotCover.GlobalTool --version 2021.2.2
    if: "${{ inputs.code_coverage }}"
    shell: bash
  - name: save_cache
    uses: actions/cache@v3.3.2
    with:
      path: "~/.nuget/packages"
      key: v1-dotcover-{{ arch }}
    if: "${{ inputs.code_coverage }}"
  - uses: actions/checkout@v4.1.0
  - uses: actions/download-artifact@v3.0.2
    with:
      path: "."
  - name: Distribute tests
    run: |-
      set -evx
      tests_collection="${{ inputs.collect_tests_from }}"
      total="$(wc -l "$tests_collection" | awk '{ print $1 }')"
      part="$(( (total + CIRCLE_NODE_TOTAL - 1) / CIRCLE_NODE_TOTAL ))"
      tail -n +$((CIRCLE_NODE_INDEX * part + 1)) "$tests_collection" \
      > .head_tests.txt
      if [[ "$part" = "0" ]]; then
        cp .head_tests.txt .current_tests.txt
      else
        head -n $part .head_tests.txt > .current_tests.txt
      fi
      excluded_tests=(
        Libplanet.Net.Tests.Protocols.ProtocolTest.KademliaTest
        Libplanet.Net.Tests.Protocols.ProtocolTest.Start
        Libplanet.Net.Tests.Protocols.ProtocolTest.Ping
        Libplanet.Net.Tests.Protocols.ProtocolTest.PingTwice
        Libplanet.Net.Tests.Protocols.ProtocolTest.PingToClosedPeer
        Libplanet.Net.Tests.Protocols.ProtocolTest.BootstrapException
        Libplanet.Net.Tests.Protocols.ProtocolTest.BootstrapAsyncTest
        Libplanet.Net.Tests.Protocols.ProtocolTest.RemoveStalePeers
        Libplanet.Net.Tests.Protocols.ProtocolTest.RoutingTableFull
        Libplanet.Net.Tests.Protocols.ProtocolTest.ReplacementCache
        Libplanet.Net.Tests.Protocols.ProtocolTest.RemoveDeadReplacementCache
        Libplanet.Net.Tests.Protocols.ProtocolTest.BroadcastMessage
        Libplanet.Net.Tests.Protocols.ProtocolTest.BroadcastGuarantee
        Libplanet.Net.Tests.Protocols.ProtocolTest.DoNotBroadcastToSourcePeer
        Libplanet.Net.Tests.Protocols.ProtocolTest.RefreshTable
        Libplanet.Extensions.Cocona.Tests.Commands.StatsCommandTest.SummaryInvalidArguments
        Libplanet.Extensions.Cocona.Tests.Commands.StoreCommandTest.TestInvalidArguments
        Libplanet.Extensions.Cocona.Tests.Commands.StoreCommandTest.TestBlockByTxIdNotExist
        Libplanet.Extensions.Cocona.Tests.Commands.StoreCommandTest.TestBlockByTxIdTwo
        Libplanet.Extensions.Cocona.Tests.Commands.StoreCommandTest.TestBlockHashesByTxId
        Libplanet.Extensions.Cocona.Tests.Commands.StoreCommandTest.TestBuildIndexTxBlockBlockByTxId
        Libplanet.Extensions.Cocona.Tests.Commands.StoreCommandTest.TestBlockByHashNotExists
        Libplanet.Extensions.Cocona.Tests.Commands.StoreCommandTest.TestBlockByHash
        Libplanet.Extensions.Cocona.Tests.Commands.StoreCommandTest.TestBlockByIndexNotExists
        Libplanet.Extensions.Cocona.Tests.Commands.StoreCommandTest.TestBlockByIndex
        Libplanet.Extensions.Cocona.Tests.Commands.StoreCommandTest.TestTxByIdNotExists
        Libplanet.Extensions.Cocona.Tests.Commands.StoreCommandTest.TestTxById
      )
      cat .current_tests.txt
      first=1
      while read test; do
        to_write=1
        for excl in "${excluded_tests[@]}"; do
          if [[ "$test" == "$excl"* ]]; then
            to_write=0
          fi
        done
        if [[ "$to_write" == "1" ]]; then
          if [[ "$first" = "1" ]]; then
            echo "FullyQualifiedName=$test"
            first=0
          else
            echo "| FullyQualifiedName=$test"
          fi
        fi
      done < .current_tests.txt > .test-filter.txt
    shell: bash
  - name: Run tests (using dotCover)
    run: ~/.dotnet/tools/dotnet-dotcover test --no-restore --no-build -c Release -l "junit;FailureBodyFormat=Verbose;LogFilePath=/tmp/junit/{assembly}.xml" --filter "$(cat .test-filter.txt)" --dcDisableDefaultFilters --dcReportType=DetailedXML --dcFilters="+:Libplanet;+:Libplanet.*;-:Libplanet.Tests;-:Libplanet.*.Tests;-:Libplanet.*.UnitTests;-:Libplanet.Benchmarks;-:Libplanet.Explorer"
    env:
      LC_ALL: "${{ inputs.locale }}"
      LANG: "${{ inputs.locale }}"
      LANGUAGE: "${{ inputs.locale }}"
    if: "${{ inputs.code_coverage }}"
    shell: bash
  - uses: actions/upload-artifact@v3.1.3
    with:
      path: "/tmp/junit"
    if: "${{ inputs.code_coverage }}"
  - uses: "./.github/actions/codecov"
    if: "${{ inputs.code_coverage }}"
    with:
      file: dotCover.Output.xml
  - name: Run tests
    run: dotnet test --no-restore --no-build -c Release -l "junit;FailureBodyFormat=Verbose;LogFilePath=/tmp/junit/{assembly}.xml" --filter "$(cat .test-filter.txt)"
    env:
      LC_ALL: "${{ inputs.locale }}"
      LANG: "${{ inputs.locale }}"
      LANGUAGE: "${{ inputs.locale }}"
    if: "${{ !(${{ inputs.code_coverage }}) }}"
    shell: bash
  - uses: actions/upload-artifact@v3.1.3
    with:
      path: "/tmp/junit"
    if: "${{ !(${{ inputs.code_coverage }}) }}"